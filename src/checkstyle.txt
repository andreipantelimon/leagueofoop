Starting audit...
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:6:12: Variable 'player1' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:7:12: Variable 'player2' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:8:9: Variable 'numPlayers' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:9:16: Variable 'type' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:11:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:16:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'setPlayer1' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'setPlayer1' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:16:28: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:21:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'setPlayer2' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'setPlayer2' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:21:28: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:26:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'setNumPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'setNumPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:26:31: Parameter num should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:30:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:34:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'getNumPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'getNumPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:38:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'getPlayer1' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'getPlayer1' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/board/Ground.java:42:5: Class 'Ground' looks like designed for extension (can be subclassed), but the method 'getPlayer2' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ground' final or making the method 'getPlayer2' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:24: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:25: Line is longer than 100 characters (found 136). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:35:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getXDim' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getXDim' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:39:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getYDim' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getYDim' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:43:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getGroundData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getGroundData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:47:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getPlayerNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getPlayerNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:51:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getPlayerData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getPlayerData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:55:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getRoundNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getRoundNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameInput.java:59:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getRoundData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getRoundData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Main.java:3: Using the '.*' form of import should be avoided - player.*. [AvoidStarImport]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Main.java:7:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Main.java:8:29: Parameter args should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Main.java:17: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:9:20: Parameter first should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:9:29: Parameter second should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:9:39: Parameter third should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:15:5: Class 'Triplet' looks like designed for extension (can be subclassed), but the method 'getFirst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Triplet' final or making the method 'getFirst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:15:25: '{' at column 25 should have line break after. [LeftCurly]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:16:5: Class 'Triplet' looks like designed for extension (can be subclassed), but the method 'getSecond' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Triplet' final or making the method 'getSecond' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:16:26: '{' at column 26 should have line break after. [LeftCurly]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:17:5: Class 'Triplet' looks like designed for extension (can be subclassed), but the method 'getThird' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Triplet' final or making the method 'getThird' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/main/Triplet.java:17:25: '{' at column 25 should have line break after. [LeftCurly]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:3: Using the '.*' form of import should be avoided - board.*. [AvoidStarImport]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:4: Using the '.*' form of import should be avoided - player.*. [AvoidStarImport]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:8: Class GameMaster should be declared as final. [FinalClass]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:9:23: Variable 'playersList' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:10:16: Variable 'board' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:13:25: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:13:26: '{' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:13:26: '}' is not preceded with whitespace. [WhitespaceAround]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:22:29: Parameter gameInput should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:70:34: Parameter gameInput should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:93:37: Parameter gameInput should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:122:30: Parameter moveData should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:128: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameMaster.java:156:27: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameIOLoader.java:56: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/main/GameIOLoader.java:59:16: Parameter string should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:5:39: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:5:47: Parameter type should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:5:58: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:5:68: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/PlayerFactory.java:6: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:9:16: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:9:24: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:9:34: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:11:19: '500' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:12:22: '500' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:16:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:20:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:20:24: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:20:39: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:24:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:24:16: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:24:31: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:32:30: '0.25f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:35:30: '350' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:35:36: '50' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:42: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:43:43: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:45:43: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:47:43: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:49:43: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:52: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:62:27: '150' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:62:33: '20' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:63:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:63:37: '30' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:71: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:72:40: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:74:40: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:76:40: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:78:40: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:81: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:82: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:94:31: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:94:72: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:98:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:102:23: '500' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Pyromancer.java:102:29: '50' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:9:9: Variable 'hitCounter' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:10:11: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:10:19: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:10:29: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:12:19: '600' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:13:22: '600' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:17:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:21:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:21:24: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:21:39: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:25:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:25:16: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:25:31: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:30:29: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:30:35: '20' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:45:36: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:50:30: '0.15f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:58: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:59:42: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:63:36: '0.25f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:65:42: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:68: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:77:30: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:77:35: '10' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:84: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:85:43: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:87:43: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:90:37: '0.25f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:92:43: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:96: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:98:27: '3' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:100:27: '6' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:113:31: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:113:72: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:117:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:121:23: '600' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Rogue.java:121:29: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:10:12: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:10:20: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:10:30: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:12:19: '400' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:13:22: '400' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:17:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:21:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:21:24: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:21:39: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:25:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:25:16: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:25:31: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:31:30: '0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:34:30: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:34:37: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:35:28: '0.3f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:40: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:41:39: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:43:39: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:45:39: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:47:39: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:49: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:61:36: '0.35f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:61:44: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:62:55: '0.7f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:67: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:68:45: '0.4f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:70:45: '0.3f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:72:45: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:75: Line is longer than 100 characters (found 118). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:87:31: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:87:72: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:91:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:95:23: '400' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Wizard.java:95:29: '30' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:9:12: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:9:20: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:9:30: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:11:19: '900' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:12:22: '900' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:16:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:20:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:20:24: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:20:39: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:24:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:24:16: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:24:31: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:27:28: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:27:34: '30' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:28:42: '20' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:28:78: '100' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:29:15: '20' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:29:52: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:30:41: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:30:63: '100' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:35:30: '0.15f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:39: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:42:41: '0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:44:41: '0.15f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:46:41: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:50: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:62:25: '100' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:62:31: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:69: switch without "default" clause. [MissingSwitchDefault]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:70:38: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:72:38: '-0.1f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:74:38: '-0.2f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:76:38: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:90:31: '200' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:90:72: '40' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:94:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:98:23: '900' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Knight.java:98:29: '80' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:6:9: Variable 'id' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:7:9: Variable 'xPos' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:8:9: Variable 'yPos' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:9:9: Variable 'hp' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:10:9: Variable 'maxHp' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:11:9: Variable 'xp' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:12:9: Variable 'level' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:13:9: Variable 'damageOverTime' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:14:9: Variable 'damageOverTimeRounds' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:15:9: Variable 'damageToWizard' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:16:9: Variable 'stunnedRounds' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:17:13: Variable 'isDead' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:18:13: Variable 'isStunned' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:19:16: Variable 'type' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:21:12: Parameter id should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:21:20: Parameter xPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:21:30: Parameter yPos should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:27:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'accept' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'accept' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:27:24: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:27:39: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:31:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:31:16: Parameter player should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:31:31: Parameter ground should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:35:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'levelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'levelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:36:28: '250' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:36:47: '50' is a magic number. [MagicNumber]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:41:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'takeDoT' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'takeDoT' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:51:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setDoT' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setDoT' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:51:24: Parameter rounds should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:51:36: Parameter damage should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:56:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:60:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'moveUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'moveUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:66:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'moveDown' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'moveDown' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:72:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'moveLeft' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'moveLeft' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:78:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'moveRight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'moveRight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:84:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:88:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:92: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:96:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'print' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'print' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:100: Line is longer than 100 characters (found 137). [LineLength]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:104:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getxPos' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getxPos' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:108:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getyPos' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getyPos' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:112:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:116:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'died' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'died' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:120:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:120:23: Parameter x should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:124:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'isDead' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'isDead' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:128:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:132:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'stun' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'stun' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:132:22: Parameter rounds should be final. [FinalParameters]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:137:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'isStunned' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'isStunned' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:141:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'removeStun' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'removeStun' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:145:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'decStun' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'decStun' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:149:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getStunnedRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getStunnedRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:153:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getMaxHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getMaxHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:157:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getDamageToWizard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getDamageToWizard' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/k1r0n/ProiectPOO/src/player/Player.java:161:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'resetDamageToWizard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'resetDamageToWizard' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 264 errors.
